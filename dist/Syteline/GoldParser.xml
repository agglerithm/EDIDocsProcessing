<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GoldParser</name>
    </assembly>
    <members>
        <member name="T:GoldParser.Symbol">
            <summary>
            Represents a terminal or nonterminal symbol used by the Deterministic
            Finite Automata (DFA) and LR Parser. 
            </summary>
            <remarks>
            Symbols can be either terminals (which represent a class of 
            tokens - such as identifiers) or nonterminals (which represent 
            the rules and structures of the grammar).  Terminal symbols fall 
            into several categories for use by the GOLD Parser Engine 
            which are enumerated in <c>SymbolType</c> enumeration.
            </remarks>
        </member>
        <member name="M:GoldParser.Symbol.#ctor(System.Int32,System.String,GoldParser.SymbolType)">
            <summary>
            Creates a new instance of <c>Symbol</c> class.
            </summary>
            <param name="index">Symbol index in symbol table.</param>
            <param name="name">Name of the symbol.</param>
            <param name="symbolType">Type of the symbol.</param>
        </member>
        <member name="M:GoldParser.Symbol.ToString">
            <summary>
            Returns the text representation of the symbol.
            In the case of nonterminals, the name is delimited by angle brackets,
            special terminals are delimited by parenthesis
            and terminals are delimited by single quotes 
            (if special characters are present).
            </summary>
            <returns>String representation of symbol.</returns>
        </member>
        <member name="P:GoldParser.Symbol.Index">
            <summary>
            Returns the index of the symbol in the GOLDParser object's Symbol Table.
            </summary>
        </member>
        <member name="P:GoldParser.Symbol.Name">
            <summary>
            Returns the name of the symbol.
            </summary>
        </member>
        <member name="P:GoldParser.Symbol.SymbolType">
            <summary>
            Returns an enumerated data type that denotes
            the class of symbols that the object belongs to.
            </summary>
        </member>
        <member name="T:GoldParser.LRState">
            <summary>
            State of LR parser.
            </summary>
        </member>
        <member name="M:GoldParser.LRState.#ctor(System.Int32,GoldParser.LRStateAction[],GoldParser.LRStateAction[])">
            <summary>
            Creates a new instance of the <c>LRState</c> class
            </summary>
            <param name="index">Index of the LR state in the LR state table.</param>
            <param name="actions">List of all available LR actions in this state.</param>
            <param name="transitionVector">Transition vector which has symbol index as an index.</param>
        </member>
        <member name="M:GoldParser.LRState.GetAction(System.Int32)">
            <summary>
            Returns state action by its index.
            </summary>
            <param name="index">State action index.</param>
            <returns>LR state action for the given index.</returns>
        </member>
        <member name="M:GoldParser.LRState.GetActionBySymbolIndex(System.Int32)">
            <summary>
            Returns LR state action by symbol index.
            </summary>
            <param name="symbolIndex">Symbol Index to search for.</param>
            <returns>LR state action object.</returns>
        </member>
        <member name="P:GoldParser.LRState.Index">
            <summary>
            Gets index of the LR state in LR state table.
            </summary>
        </member>
        <member name="P:GoldParser.LRState.ActionCount">
            <summary>
            Gets LR state action count.
            </summary>
        </member>
        <member name="T:GoldParser.Rule">
            <summary>
            Rule is the logical structures of the grammar.
            </summary>
            <remarks>
            Rules consist of a head containing a nonterminal 
            followed by a series of both nonterminals and terminals.
            </remarks>	
        </member>
        <member name="M:GoldParser.Rule.#ctor(System.Int32,GoldParser.Symbol,GoldParser.Symbol[])">
            <summary>
            Creates a new instance of <c>Rule</c> class.
            </summary>
            <param name="index">Index of the rule in the grammar rule table.</param>
            <param name="nonTerminal">Nonterminal of the rule.</param>
            <param name="symbols">Terminal and nonterminal symbols of the rule.</param>
        </member>
        <member name="M:GoldParser.Rule.ToString">
            <summary>
            Returns the Backus-Noir representation of the rule.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GoldParser.Rule.Index">
            <summary>
            Gets index of the rule in the rule table.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.NonTerminal">
            <summary>
            Gets the head symbol of the rule.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.Name">
            <summary>
            Gets name of the rule.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.Count">
            <summary>
            Gets number of symbols.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.Item(System.Int32)">
            <summary>
            Gets symbol by its index.
            </summary>
        </member>
        <member name="P:GoldParser.Rule.ContainsOneNonTerminal">
            <summary>
            Gets true if the rule contains exactly one symbol.
            </summary>
            <remarks>Used by the Parser object to TrimReductions</remarks>
        </member>
        <member name="P:GoldParser.Rule.Definition">
            <summary>
            Gets the rule definition.
            </summary>
        </member>
        <member name="T:GoldParser.SR">
            <summary>
            Custom resource class. Usage:
            string s = Res.GetString(Res.MyIdenfitier);
            </summary>
        </member>
        <member name="T:GoldParser.Parser">
            <summary>
            Pull parser which uses Grammar table to parser input stream.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.#ctor(System.IO.TextReader,GoldParser.Grammar)">
            <summary>
            Initializes new instance of Parser class.
            </summary>
            <param name="textReader">TextReader instance to read data from.</param>
            <param name="grammar">Grammar with parsing tables to parser input stream.</param>
        </member>
        <member name="F:GoldParser.Parser.m_PrevParserContext">
            <summary>
            Added by Infor.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.ReadBuffer">
            <summary>
            Reads next characters to the buffer.
            </summary>
            <returns>Number of characters read.</returns>
        </member>
        <member name="M:GoldParser.Parser.MoveBy(System.Int32)">
            <summary>
            Increments current char index by delta character positions.
            </summary>
            <param name="delta">Number to increment char index.</param>
        </member>
        <member name="M:GoldParser.Parser.MoveToLineEnd">
            <summary>
            Moves current char pointer to the end of source line.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.PushInputToken(GoldParser.Symbol,System.String,System.Object)">
            <summary>
            Pushes a token to the input token stack.
            </summary>
            <param name="symbol">Token symbol.</param>
            <param name="text">Token text.</param>
            <param name="syntaxNode">Syntax node associated with the token.</param>
        </member>
        <member name="M:GoldParser.Parser.PopInputToken">
            <summary>
            Pops token from the input token stack.
            </summary>
            <returns>Token symbol from the top of input token stack.</returns>
        </member>
        <member name="M:GoldParser.Parser.ReadToken">
            <summary>
            Reads next token from the input stream.
            </summary>
            <returns>Token symbol which was read.</returns>
        </member>
        <member name="M:GoldParser.Parser.DiscardInputToken">
            <summary>
            Removes current token and pops next token from the input stack.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.GetReductionSyntaxNode(System.Int32)">
            <summary>
            Gets reduction item syntax object by its index.
            </summary>
            <param name="index">Index of reduction item.</param>
            <returns>Syntax object attached to reduction item.</returns>
        </member>
        <member name="M:GoldParser.Parser.GetExpectedTokens">
            <summary>
            Gets array of expected token symbols.
            </summary>
        </member>
        <member name="M:GoldParser.Parser.Parse">
            <summary>
            Executes next step of parser and returns parser state.
            </summary>
            <returns>Parser current state.</returns>
        </member>
        <member name="P:GoldParser.Parser.Grammar">
            <summary>
            Gets the parser's grammar.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TrimReductions">
            <summary>
            Gets or sets flag to trim reductions.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TextReader">
            <summary>
            Gets source of parsed data.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.CharPosition">
            <summary>
            Gets current char position.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.LineNumber">
            <summary>
            Gets current line number. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.LinePosition">
            <summary>
            Gets current char position in the current source line. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.LineText">
            <summary>
            Gets current source line text. It can be truncated if line is longer than 2048 characters.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.ParserContext">
            <summary>
            Returns the currently unresolved context.
            </summary>
            <remarks>Added by Infor</remarks>
        </member>
        <member name="P:GoldParser.Parser.SourceLineReadCallback">
            <summary>
            Gets or sets callback function to track source line text.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenSymbol">
            <summary>
            Gets or sets current token symbol.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenText">
            <summary>
            Gets or sets current token text.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenCharPosition">
            <summary>
            Gets or sets current token position relative to input stream beginning.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenLength">
            <summary>
            Gets or sets current token text length.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenLineNumber">
            <summary>
            Gets or sets current token line number. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenLinePosition">
            <summary>
            Gets or sets current token position in current source line. It is 1-based.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenSyntaxNode">
            <summary>
            Gets or sets token syntax object associated with the current token or reduction.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.TokenString">
            <summary>
            Returns string representation of the token.
            </summary>
            <returns>String representation of the token.</returns>
        </member>
        <member name="P:GoldParser.Parser.CurrentLRState">
            <summary>
            Gets current LR state.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.ReductionRule">
            <summary>
            Gets current reduction syntax rule.
            </summary>
        </member>
        <member name="P:GoldParser.Parser.ReductionCount">
            <summary>
            Gets number of items in the current reduction
            </summary>
        </member>
        <member name="P:GoldParser.Parser.CommentText">
            <summary>
            Gets current comment text.
            </summary>
        </member>
        <member name="T:GoldParser.Parser.TokenParseResult">
            <summary>
            Result of parsing token.
            </summary>
        </member>
        <member name="T:GoldParser.Parser.Token">
            <summary>
            Represents data about current token.
            </summary>
        </member>
        <member name="T:GoldParser.Parser.LRStackItem">
            <summary>
            Represents item in the LR parsing stack.
            </summary>
        </member>
        <member name="T:GoldParser.SourceLineReadCallback">
            <summary>
            This callback is used by parser to notify read source line.
            Use parser.LineText to get line source.
            </summary>
        </member>
        <member name="T:GoldParser.LRStateAction">
            <summary>
            Action in a LR State. 
            </summary>
        </member>
        <member name="M:GoldParser.LRStateAction.#ctor(System.Int32,GoldParser.Symbol,GoldParser.LRAction,System.Int32)">
            <summary>
            Creats a new instance of the <c>LRStateAction</c> class.
            </summary>
            <param name="index">Index of the LR state action.</param>
            <param name="symbol">Symbol associated with the action.</param>
            <param name="action">Action type.</param>
            <param name="value">Action value.</param>
        </member>
        <member name="P:GoldParser.LRStateAction.Index">
            <summary>
            Gets index of the LR state action.
            </summary>
        </member>
        <member name="P:GoldParser.LRStateAction.Symbol">
            <summary>
            Gets symbol associated with the LR state action.
            </summary>
        </member>
        <member name="P:GoldParser.LRStateAction.Action">
            <summary>
            Gets action type.
            </summary>
        </member>
        <member name="P:GoldParser.LRStateAction.Value">
            <summary>
            Gets the action value.
            </summary>
        </member>
        <member name="T:GoldParser.Grammar">
            <summary>
            Contains grammar tables required for parsing.
            </summary>
        </member>
        <member name="F:GoldParser.Grammar.FileHeader">
            <summary>
            Identifies Gold parser grammar file.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.#ctor(System.IO.BinaryReader)">
            <summary>
            Creates a new instance of <c>Grammar</c> class
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GoldParser.Grammar.Load">
            <summary>
            Loads grammar from the binary reader.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadNextRecord">
            <summary>
            Reads the next record in the binary grammar file.
            </summary>
            <returns>Read record type.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadHeader">
            <summary>
            Reads grammar header information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadTableCounts">
            <summary>
            Reads table record counts and initializes tables.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadInitialStates">
            <summary>
            Read initial DFA and LR states.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadSymbols">
            <summary>
            Read symbol information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.GetSymbol(System.Int32)">
            <summary>
            Returns the symbol with the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
            <remarks>Infor added.</remarks>
        </member>
        <member name="M:GoldParser.Grammar.ReadCharSets">
            <summary>
            Read char set information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadRules">
            <summary>
            Read rule information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadDfaStates">
            <summary>
            Read DFA state information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadLRStates">
            <summary>
            Read LR state information.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.CreateDfaTransitionVector(GoldParser.Grammar.DfaEdge[])">
            <summary>
            Creates the DFA state transition vector.
            </summary>
            <param name="edges">Array of automata edges.</param>
            <returns>Hashtable with the transition information.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadEmptyEntry">
            <summary>
            Reads empty entry from the grammar file.
            </summary>
        </member>
        <member name="M:GoldParser.Grammar.ReadStringEntry">
            <summary>
            Reads string entry from the grammar file.
            </summary>
            <returns>String entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadInt16Entry">
            <summary>
            Reads Int16 entry from the grammar file.
            </summary>
            <returns>Int16 entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadByteEntry">
            <summary>
            Reads byte entry from the grammar file.
            </summary>
            <returns>Byte entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadBoolEntry">
            <summary>
            Reads boolean entry from the grammar file.
            </summary>
            <returns>Boolean entry content.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadEntryType">
            <summary>
            Reads entry type.
            </summary>
            <returns>Entry type.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadString">
            <summary>
            Reads string from the grammar file.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadInt16">
            <summary>
            Reads two byte integer Int16 from the grammar file.
            </summary>
            <returns>Int16 value.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadByte">
            <summary>
            Reads byte from the grammar file.
            </summary>
            <returns>Byte value.</returns>
        </member>
        <member name="M:GoldParser.Grammar.ReadBool">
            <summary>
            Reads boolean from the grammar file.
            </summary>
            <returns>Boolean value.</returns>
        </member>
        <member name="P:GoldParser.Grammar.Name">
            <summary>
            Gets grammar name.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.Version">
            <summary>
            Gets grammar version.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.Author">
            <summary>
            Gets grammar author.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.About">
            <summary>
            Gets grammar description.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.StartSymbol">
            <summary>
            Gets the start symbol for the grammar.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.CaseSensitive">
            <summary>
            Gets the value indicating if the grammar is case sensitive.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.DfaInitialState">
            <summary>
            Gets initial DFA state.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.InitialLRState">
            <summary>
            Gets initial LR state.
            </summary>
        </member>
        <member name="P:GoldParser.Grammar.EndSymbol">
            <summary>
            Gets a special symbol to designate last token in the input stream.
            </summary>
        </member>
        <member name="T:GoldParser.Grammar.RecordType">
            <summary>
            Record type byte in the binary grammar file.
            </summary>
        </member>
        <member name="T:GoldParser.Grammar.EntryType">
            <summary>
            Entry type byte in the binary grammar file.
            </summary>
        </member>
        <member name="T:GoldParser.Grammar.DfaEdge">
            <summary>
            Edge between DFA states.
            </summary>
        </member>
        <member name="T:GoldParser.ParseMessage">
            <summary>
            Available parse messages.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.Empty">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.TokenRead">
            <summary>
            Each time a token is read, this message is generated.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.Reduction">
            <summary>
            When the engine is able to reduce a rule,
            this message is returned. The rule that was
            reduced is set in the GOLDParser's ReduceRule property.
            The tokens that are reduced and correspond the
            rule's definition are stored in the Tokens() property.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.Accept">
            <summary>
            The engine will returns this message when the source
            text has been accepted as both complete and correct.
            In other words, the source text was successfully analyzed.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.NotLoadedError">
            <summary>
            Before any parsing can take place,
            a Compiled Grammar Table file must be loaded.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.LexicalError">
            <summary>
            The tokenizer will generate this message when
            it is unable to recognize a series of characters
            as a valid token. To recover, pop the invalid
            token from the input queue.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.SyntaxError">
            <summary>
            Often the parser will read a token that is not expected
            in the grammar. When this happens, the Tokens() property
            is filled with tokens the parsing engine expected to read.
            To recover: push one of the expected tokens on the input queue.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.CommentError">
            <summary>
            The parser reached the end of the file while reading a comment.
            This is caused when the source text contains a "run-away"
            comment, or in other words, a block comment that lacks the
            delimiter.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.InternalError">
            <summary>
            Something is wrong, very wrong.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.CommentBlockRead">
            <summary>
            A block comment is complete.
            When this message is returned, the content of the CurrentComment
            property is set to the comment text. The text includes starting and ending
            block comment characters.
            </summary>
        </member>
        <member name="F:GoldParser.ParseMessage.CommentLineRead">
            <summary>
            Line comment is read.
            When this message is returned, the content of the CurrentComment
            property is set to the comment text. The text includes starting 
            line comment characters.
            </summary>
        </member>
        <member name="T:GoldParser.ObjectMap">
            <summary>
            Maps integer values used for transition vectors to objects.
            </summary>
        </member>
        <member name="M:GoldParser.ObjectMap.#ctor">
            <summary>
            Creates new instance of <see cref="T:GoldParser.ObjectMap"/> class.
            </summary>
        </member>
        <member name="M:GoldParser.ObjectMap.GetKey(System.Int32)">
            <summary>
            Returns key by index.
            </summary>
            <param name="index">Zero based index of the requested key.</param>
            <returns>Returns key for the given index.</returns>
        </member>
        <member name="M:GoldParser.ObjectMap.Remove(System.Int32)">
            <summary>
            Removes entry by its key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:GoldParser.ObjectMap.Add(System.Int32,System.Object)">
            <summary>
            Adds a new key and value pair. 
            If key exists then value is applied to existing key.
            </summary>
            <param name="key">New key to add.</param>
            <param name="value">Value for the key.</param>
        </member>
        <member name="P:GoldParser.ObjectMap.Count">
            <summary>
            Gets number of entries in the map.
            </summary>
        </member>
        <member name="P:GoldParser.ObjectMap.ReadOnly">
            <summary>
            Gets or sets read only flag.
            </summary>
        </member>
        <member name="P:GoldParser.ObjectMap.Item(System.Int32)">
            <summary>
            Gets or sets value by key.
            </summary>
        </member>
        <member name="T:GoldParser.LRAction">
            <summary>
            LR parser action type.
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.None">
            <summary>
            No action. Not used.
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Shift">
            <summary>
            Shift a symbol and go to a state
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Reduce">
            <summary>
            Reduce by a specified rule
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Goto">
            <summary>
            Goto to a state on reduction
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Accept">
            <summary>
            Input successfully parsed
            </summary>
        </member>
        <member name="F:GoldParser.LRAction.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:GoldParser.SymbolType">
            <summary>
            Type of symbol.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.NonTerminal">
            <summary>
            Normal nonterminal
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.Terminal">
            <summary>
            Normal terminal
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.WhiteSpace">
            <summary>
            This Whitespace symbols is a special terminal
            that is automatically ignored the the parsing engine.
            Any text accepted as whitespace is considered
            to be inconsequential and "meaningless".
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.End">
            <summary>
            The End symbol is generated when the tokenizer
            reaches the end of the source text.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.CommentStart">
            <summary>
            This type of symbol designates the start of a block quote.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.CommentEnd">
            <summary>
            This type of symbol designates the end of a block quote.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.CommentLine">
            <summary>
            When the engine reads a token that is recognized as
            a line comment, the remaining characters on the line
            are automatically ignored by the parser.
            </summary>
        </member>
        <member name="F:GoldParser.SymbolType.Error">
            <summary>
            The Error symbol is a general-purpose means
            of representing characters that were not recognized
            by the tokenizer. In other words, when the tokenizer
            reads a series of characters that is not accepted
            by the DFA engine, a token of this type is created.
            </summary>
        </member>
        <member name="T:GoldParser.DfaState">
            <summary>
            State in the Deterministic Finite Automata 
            which is used by the tokenizer.
            </summary>
        </member>
        <member name="M:GoldParser.DfaState.#ctor(System.Int32,GoldParser.Symbol,GoldParser.ObjectMap)">
            <summary>
            Creates a new instance of the <c>DfaState</c> class.
            </summary>
            <param name="index">Index in the DFA state table.</param>
            <param name="acceptSymbol">Symbol to accept.</param>
            <param name="transitionVector">Transition vector.</param>
        </member>
        <member name="P:GoldParser.DfaState.Index">
            <summary>
            Gets index of the state in DFA state table.
            </summary>
        </member>
        <member name="P:GoldParser.DfaState.AcceptSymbol">
            <summary>
            Gets the symbol which can be accepted in this DFA state.
            </summary>
        </member>
    </members>
</doc>
